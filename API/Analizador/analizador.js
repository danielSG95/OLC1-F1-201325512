/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,43],$V1=[1,19],$V2=[1,20],$V3=[1,22],$V4=[1,23],$V5=[1,24],$V6=[1,31],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,37],$Vj=[1,38],$Vk=[1,39],$Vl=[1,40],$Vm=[5,22,23,27,29,33,36,37,39,42,46,49,50,51,53,54,56,57,58,81,82,83,84,85],$Vn=[1,46],$Vo=[1,56],$Vp=[1,55],$Vq=[1,53],$Vr=[1,54],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,71],$Vz=[26,28],$VA=[2,25],$VB=[1,74],$VC=[1,76],$VD=[1,79],$VE=[1,91],$VF=[1,90],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,96],$VK=[26,28,35,60,61,62,64,65,66,67,68,69,70,71,72,73,74],$VL=[2,83],$VM=[1,99],$VN=[26,28,35,44,60,61,62,64,65,66,67,68,69,70,71,72,73,74],$VO=[1,106],$VP=[5,22,23,27,29,33,34,36,37,39,42,46,49,50,51,53,54,56,57,58,63,70,71,75,76,77,78,79,80,81,82,83,84,85],$VQ=[28,35],$VR=[2,47],$VS=[26,28,35],$VT=[26,28,35,60,61,62],$VU=[29,34,63,70,71,75,76,77,78,79,80],$VV=[2,69],$VW=[1,148],$VX=[26,28,35,60,61,62,64,65,66,67,68,69,70,71],$VY=[26,28,35,60,61,62,64,65,66,67,68,69,70,71,72,73],$VZ=[1,167],$V_=[37,42];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"ini":4,"EOF":5,"linstrucciones":6,"instruccion":7,"declaracion":8,"asignacion":9,"if":10,"switch":11,"for":12,"while":13,"do":14,"return":15,"func":16,"bloque":17,"call":18,"print":19,"println":20,"typeof":21,"RBREAK":22,"RCONTINUE":23,"tipo":24,"ldec":25,"PTCOMA":26,"RCONST":27,"COMA":28,"IDENTIFICADOR":29,"asig":30,"ASIG":31,"expresion_logica":32,"RIF":33,"PARENTESIS_A":34,"PARENTESIS_C":35,"LLAVE_A":36,"LLAVE_C":37,"RELSE":38,"RSWITCH":39,"expresion_numerica":40,"lcase":41,"RCASE":42,"dato":43,"DOSPTS":44,"RDEFAULT":45,"RFOR":46,"for_declaracion":47,"for_incremento":48,"RWHILE":49,"RDO":50,"RRETURN":51,"lparametros":52,"RVOID":53,"RCALL":54,"largumentos":55,"RPRINT":56,"RPRINTLN":57,"RTYPEOF":58,"expresin_relacional":59,"AND":60,"OR":61,"XOR":62,"NOT":63,"MAYOR":64,"MENOR":65,"MAYORI":66,"MENORI":67,"IGUAL":68,"DIF":69,"MENOS":70,"MAS":71,"MULT":72,"DIV":73,"MOD":74,"ENTERO":75,"DECIMAL":76,"CADENA":77,"CHAR":78,"RTRUE":79,"RFALSE":80,"RINT":81,"RDOUBLE":82,"RCHAR":83,"RBOOLEAN":84,"RSTRING":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:"RBREAK",23:"RCONTINUE",26:"PTCOMA",27:"RCONST",28:"COMA",29:"IDENTIFICADOR",31:"ASIG",33:"RIF",34:"PARENTESIS_A",35:"PARENTESIS_C",36:"LLAVE_A",37:"LLAVE_C",38:"RELSE",39:"RSWITCH",42:"RCASE",44:"DOSPTS",45:"RDEFAULT",46:"RFOR",49:"RWHILE",50:"RDO",51:"RRETURN",53:"RVOID",54:"RCALL",56:"RPRINT",57:"RPRINTLN",58:"RTYPEOF",60:"AND",61:"OR",62:"XOR",63:"NOT",64:"MAYOR",65:"MENOR",66:"MAYORI",67:"MENORI",68:"IGUAL",69:"DIF",70:"MENOS",71:"MAS",72:"MULT",73:"DIV",74:"MOD",75:"ENTERO",76:"DECIMAL",77:"CADENA",78:"CHAR",79:"RTRUE",80:"RFALSE",81:"RINT",82:"RDOUBLE",83:"RCHAR",84:"RBOOLEAN",85:"RSTRING"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,4],[25,4],[25,2],[30,0],[30,2],[9,4],[10,7],[10,5],[10,9],[10,11],[11,7],[41,5],[41,3],[41,4],[12,10],[47,1],[47,1],[48,1],[48,1],[13,7],[14,9],[15,0],[15,3],[16,8],[16,8],[52,0],[52,4],[52,2],[17,3],[18,6],[55,3],[55,1],[19,5],[20,5],[21,5],[32,3],[32,3],[32,3],[32,2],[32,1],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,1],[40,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,4],[40,3],[40,3],[40,3],[40,3],[40,4],[40,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[24,1],[24,1],[24,1],[24,1],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return {tk : tokens, err: errores}
    
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},{1:[3]},{5:[1,41]},{5:[2,2],7:42,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),o($Vm,[2,8]),o($Vm,[2,9]),o($Vm,[2,10]),o($Vm,[2,11]),o($Vm,[2,12]),o($Vm,[2,13]),o($Vm,[2,14]),o($Vm,[2,15]),o($Vm,[2,16]),o($Vm,[2,17]),o($Vm,[2,18]),o($Vm,[2,19]),o($Vm,[2,20]),{25:43,29:[1,44]},{24:45,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},{31:$Vn},{34:[1,47]},{34:[1,48]},{34:[1,49]},{34:[1,50]},{36:[1,51]},{29:$Vo,34:$Vp,40:52,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:[1,64]},{6:65,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:$V0,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},{29:[1,66]},{34:[1,67]},{34:[1,68]},{34:[1,69]},{29:[2,90]},{29:[2,91]},{29:[2,92]},{29:[2,93]},{29:[2,94]},{1:[2,1]},o($Vm,[2,3]),{26:[1,70],28:$Vy},o($Vz,$VA,{30:73,31:$VB,34:[1,72]}),{25:75,29:$VC},{29:$Vo,32:77,34:$Vp,40:80,43:57,59:78,63:$VD,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,32:81,34:$Vp,40:80,43:57,59:78,63:$VD,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,34:$Vp,40:82,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{8:84,9:85,24:86,27:$V3,29:$V4,47:83,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},{29:$Vo,32:87,34:$Vp,40:80,43:57,59:78,63:$VD,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{6:88,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:$V0,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},{26:[1,89],70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{29:$Vo,34:$Vp,40:95,43:57,70:$VJ,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{71:[1,97]},{29:$Vo,34:$Vp,40:98,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},o($VK,$VL,{34:$VM}),o($VK,[2,82]),o($VN,[2,84]),o($VN,[2,85]),o($VN,[2,86]),o($VN,[2,87]),o($VN,[2,88]),o($VN,[2,89]),{34:[1,100]},{7:42,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:[1,101],39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},{34:[1,102]},{29:$Vo,34:$Vp,40:103,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,34:$Vp,40:104,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$VO,43:105,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},o($VP,[2,21]),{29:[1,107]},o($VQ,$VR,{52:108,24:109,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl}),o($Vz,[2,24]),{29:$Vo,32:110,34:$Vp,40:80,43:57,59:78,63:$VD,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{26:[1,111],28:$Vy},o($Vz,$VA,{30:73,31:$VB}),{26:[1,112]},o($VS,[2,61],{60:[1,113],61:[1,114],62:[1,115]}),{29:$Vo,34:$Vp,40:80,43:57,59:116,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},o($VT,[2,68],{64:[1,117],65:[1,118],66:[1,119],67:[1,120],68:[1,121],69:[1,122],70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),{35:[1,123]},{35:[1,124],70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{29:$Vo,32:125,34:$Vp,40:80,43:57,59:78,63:$VD,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},o($VU,[2,37]),o($VU,[2,38]),{25:43,29:$VC},{35:[1,126]},{7:42,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:[1,127],39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},o($Vm,[2,44]),{29:$Vo,34:$Vp,40:129,43:57,70:$Vq,71:[1,128],75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,34:$Vp,40:131,43:57,70:[1,130],71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,34:$Vp,40:133,43:57,70:$Vq,71:$Vr,72:[1,132],75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,34:$Vp,40:134,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,34:$Vp,40:135,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},o($VK,$VV),{29:$Vo,34:$Vp,40:136,43:57,70:$VJ,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,34:$Vp,40:137,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{35:[1,138],70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{29:$Vo,34:$Vp,40:140,43:57,55:139,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},o($VQ,$VR,{24:109,52:141,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl}),o($Vm,[2,50]),{29:$Vo,34:$Vp,40:140,43:57,55:142,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{35:[1,143],70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{35:[1,144],70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{35:[1,145]},o([35,44],$VL),o($Vz,$VA,{30:146,31:$VB}),{28:$VW,35:[1,147]},{29:[1,149]},o($Vz,[2,26]),o($VP,[2,22]),o([5,22,23,27,29,33,34,35,36,37,39,42,46,49,50,51,53,54,56,57,58,63,70,71,75,76,77,78,79,80,81,82,83,84,85],[2,27]),{29:$Vo,34:$Vp,40:80,43:57,59:150,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,34:$Vp,40:80,43:57,59:151,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,34:$Vp,40:80,43:57,59:152,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},o($VS,[2,60]),{29:$Vo,34:$Vp,40:153,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,34:$Vp,40:154,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,34:$Vp,40:155,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,34:$Vp,40:156,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,34:$Vp,40:157,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{29:$Vo,34:$Vp,40:158,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},o([5,37,42],$V0,{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,24:21,7:160,22:$V1,23:$V2,27:$V3,29:$V4,33:$V5,36:[1,159],39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl}),{36:[1,161]},{26:[1,162]},{36:[1,163]},{49:[1,164]},o($VK,[2,72]),o($VX,[2,74],{72:$VG,73:$VH,74:$VI}),o($VK,[2,73],{43:57,40:95,29:$Vo,34:$Vp,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx}),o($VX,[2,75],{72:$VG,73:$VH,74:$VI}),{29:$Vo,34:$Vp,40:165,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},o($VY,[2,77],{74:$VI}),o($VY,[2,78],{74:$VI}),o($VK,[2,79]),o($VX,[2,71],{72:$VV,73:$VV,74:$VV}),o($VX,[2,70],{72:$VG,73:$VH,74:$VI}),o($VK,[2,80]),{28:$VZ,35:[1,166]},o($VQ,[2,53],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),{28:$VW,35:[1,168]},{28:$VZ,35:[1,169]},{26:[1,170]},{26:[1,171]},{26:[1,172]},o($Vz,[2,23]),{36:[1,173]},{24:174,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},o($VQ,[2,49]),o($VS,[2,57]),o($VS,[2,58]),o($VS,[2,59]),o($VT,[2,62],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VT,[2,63],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VT,[2,64],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VT,[2,65],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VT,[2,66],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),o($VT,[2,67],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),{6:175,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:$V0,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},o($Vm,[2,29]),{41:176,42:[1,178],45:[1,177]},{9:181,29:[1,182],34:$Vp,40:180,43:57,48:179,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{6:183,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:$V0,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},{34:[1,184]},o($VY,[2,76],{74:$VI}),o($VK,[2,81]),{29:$Vo,34:$Vp,40:185,43:57,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{36:[1,186]},{26:[1,187]},o($Vm,[2,54]),o($Vm,[2,55]),o($Vm,[2,56]),{6:188,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:$V0,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},{29:[1,189]},{7:42,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:[1,190],39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},{37:[1,191],42:[1,192]},{44:[1,193]},{29:$VO,43:194,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},{35:[1,195]},{35:[2,39],70:$VE,71:$VF,72:$VG,73:$VH,74:$VI},{35:[2,40]},o([35,70,71,72,73,74],$VL,{31:$Vn,34:$VM}),{7:42,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:[1,196],39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},{29:$Vo,32:197,34:$Vp,40:80,43:57,59:78,63:$VD,70:$Vq,71:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},o($VQ,[2,52],{70:$VE,71:$VF,72:$VG,73:$VH,74:$VI}),{6:198,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:$V0,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},o($Vm,[2,51]),{7:42,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:[1,199],39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},o($VQ,[2,48]),o($Vm,[2,28],{38:[1,200]}),o($Vm,[2,32]),{29:$VO,43:201,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx},o($V_,$V0,{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,24:21,6:202,22:$V1,23:$V2,27:$V3,29:$V4,33:$V5,36:$V6,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl}),{44:[1,203]},{36:[1,204]},o($Vm,[2,41]),{35:[1,205]},{7:42,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:[1,206],39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},o($Vm,[2,45]),{10:207,33:$V5,36:[1,208]},{44:[1,209]},o($V_,[2,34],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,24:21,7:42,22:$V1,23:$V2,27:$V3,29:$V4,33:$V5,36:$V6,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl}),o($V_,$V0,{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,24:21,6:210,22:$V1,23:$V2,27:$V3,29:$V4,33:$V5,36:$V6,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl}),{6:211,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:$V0,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},{26:[1,212]},o($Vm,[2,46]),o($Vm,[2,30]),{6:213,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:$V0,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},o($V_,$V0,{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,24:21,6:214,22:$V1,23:$V2,27:$V3,29:$V4,33:$V5,36:$V6,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl}),o($V_,[2,35],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,24:21,7:42,22:$V1,23:$V2,27:$V3,29:$V4,33:$V5,36:$V6,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl}),{7:42,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:[1,215],39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},o($Vm,[2,42]),{7:42,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:21,27:$V3,29:$V4,33:$V5,36:$V6,37:[1,216],39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl},o($V_,[2,33],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,24:21,7:42,22:$V1,23:$V2,27:$V3,29:$V4,33:$V5,36:$V6,39:$V7,46:$V8,49:$V9,50:$Va,51:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vf,58:$Vg,81:$Vh,82:$Vi,83:$Vj,84:$Vk,85:$Vl}),o($Vm,[2,36]),o($Vm,[2,31])],
defaultActions: {36:[2,90],37:[2,91],38:[2,92],39:[2,93],40:[2,94],41:[2,1],181:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // aqui se llama al arbol
    const Token = require('./Token').Token;
    const Error = require('./Error').Error;


    let tokens = [];
    let errores = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://se ignoran espacios en blanco
break;
case 1://Comentarios unilinea
break;
case 2://comentarios multilinea
break;
case 3: tokens.push(new Token('r_int', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 81;
break;
case 4: tokens.push(new Token('r_double', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82;
break;
case 5: tokens.push(new Token('r_char', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 83;
break;
case 6: tokens.push(new Token('r_boolean', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 84;
break;
case 7: tokens.push(new Token('r_string', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 85;
break;
case 8: tokens.push(new Token('r_const', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 27;
break;
case 9: tokens.push(new Token('r_if', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33;
break;
case 10: tokens.push(new Token('r_else', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 38;
break;
case 11: tokens.push(new Token('r_null', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'RNULL';
break;
case 12: tokens.push(new Token('r_switch', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 13: tokens.push(new Token('r_case', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42;
break;
case 14: tokens.push(new Token('r_default', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 15: tokens.push(new Token('r_for', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 16: tokens.push(new Token('r_while', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 49;
break;
case 17: tokens.push(new Token('r_true', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 79;
break;
case 18: tokens.push(new Token('r_false', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 80;
break;
case 19: tokens.push(new Token('r_do', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50;
break;
case 20: tokens.push(new Token('r_continue', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 23;
break;
case 21: tokens.push(new Token('r_void', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 53;
break;
case 22: tokens.push(new Token('r_return', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 23: tokens.push(new Token('r_call', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 24: tokens.push(new Token('r_break', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 22;
break;
case 25: tokens.push(new Token('r_println', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 57;
break;
case 26: tokens.push(new Token('r_print', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 56;
break;
case 27: tokens.push(new Token('r_typeof', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 58;
break;
case 28: tokens.push(new Token('tk_;', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 29: tokens.push(new Token('tk_,', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 30: tokens.push(new Token('tk_(', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 31: tokens.push(new Token('tk_)', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 32: tokens.push(new Token('tk_{', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36;
break;
case 33: tokens.push(new Token('tk_}', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 37;
break;
case 34: tokens.push(new Token('tk_:', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44;
break;
case 35: tokens.push(new Token('tk_>=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 66; 
break;
case 36: tokens.push(new Token('tk_<=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67; 
break;
case 37: tokens.push(new Token('tk_==', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68; 
break;
case 38: tokens.push(new Token('tk_!=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 69; 
break;
case 39: tokens.push(new Token('tk_>', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64; 
break;
case 40: tokens.push(new Token('tk_<', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 65; 
break;
case 41: tokens.push(new Token('tk_=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31; 
break;
case 42: tokens.push(new Token('tk_and', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60; 
break;
case 43: tokens.push(new Token('tk_or', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 61; 
break;
case 44: tokens.push(new Token('tk_not', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63; 
break;
case 45: tokens.push(new Token('tk_xor', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62; 
break;
case 46: tokens.push(new Token('tk_+', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71; 
break;
case 47: tokens.push(new Token('tk_-', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 70; 
break;
case 48: tokens.push(new Token('tk_*', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 72; 
break;
case 49: tokens.push(new Token('tk_/', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73; 
break;
case 50: tokens.push(new Token('tk_**', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'POW'; 
break;
case 51: tokens.push(new Token('tk_%', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74; 
break;
case 52: tokens.push(new Token('tk_identificador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29; 
break;
case 53: tokens.push(new Token('tk_decimal', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 76; 
break;
case 54: tokens.push(new Token('tk_entero', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 75; 
break;
case 55:  /*yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2);*/ tokens.push(new Token('tk_cadena', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
                                return 77;                           
                            
break;
case 56: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); tokens.push(new Token('tk_char', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
                                return 78; 
                            
break;
case 57:return 5;
break;
case 58: 
                                errores.push(new Error(yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column, 'Caracter Desconocido', 'Error Lexico'));
                            
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:String\b)/,/^(?:const\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:null\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:do\b)/,/^(?:continue\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:call\b)/,/^(?:break\b)/,/^(?:Println\b)/,/^(?:Print\b)/,/^(?:Typeof\b)/,/^(?:;)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\^)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\*\*)/,/^(?:%)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:"[^\"]*")/,/^(?:'[a-zA-Z]')/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}