/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var esperados = [];
var err_lexema = "";
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,17],$V2=[1,29],$V3=[1,53],$V4=[1,49],$V5=[1,34],$V6=[1,61],$V7=[1,42],$V8=[1,35],$V9=[1,36],$Va=[1,37],$Vb=[1,38],$Vc=[1,39],$Vd=[1,41],$Ve=[1,43],$Vf=[1,44],$Vg=[1,45],$Vh=[1,46],$Vi=[1,76],$Vj=[1,77],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,75],$Vo=[1,68],$Vp=[1,60],$Vq=[1,47],$Vr=[1,69],$Vs=[1,70],$Vt=[1,71],$Vu=[1,72],$Vv=[1,73],$Vw=[1,74],$Vx=[1,55],$Vy=[1,56],$Vz=[1,57],$VA=[1,58],$VB=[1,59],$VC=[1,80],$VD=[1,81],$VE=[1,83],$VF=[2,5,17,19,21,33,41,42,54,55,59,60,62,67,68,71,72,73,75,76,78,79,80,82,84,93,94,95,97,102,109,110,116,117,118,119,120,121,122,123,124,125,126],$VG=[91,99,100,101,103,104,105,106,107,108,109,110,111,112,113],$VH=[2,127],$VI=[2,128],$VJ=[2,137],$VK=[2,136],$VL=[2,134],$VM=[2,129],$VN=[2,138],$VO=[1,108],$VP=[2,93],$VQ=[2,115],$VR=[1,133],$VS=[1,134],$VT=[1,135],$VU=[1,136],$VV=[1,137],$VW=[1,138],$VX=[1,129],$VY=[1,128],$VZ=[1,130],$V_=[1,131],$V$=[1,132],$V01=[20,44,51,56,64,91,99,100,101,103,104,105,106,107,108,109,110,111,112,113],$V11=[2,144],$V21=[1,140],$V31=[1,142],$V41=[1,139],$V51=[20,44,51,56,64,99,100,101,103,104,105,106,107,108,109,110,111,112,113],$V61=[2,125],$V71=[1,147],$V81=[42,43],$V91=[1,150],$Va1=[1,152],$Vb1=[2,5,17,19,21,33,41,42,54,55,58,59,60,62,67,68,71,72,73,75,76,78,79,80,82,84,93,94,95,97,102,109,110,116,117,118,119,120,121,122,123,124,125,126],$Vc1=[91,99,100,101],$Vd1=[1,167],$Ve1=[45,51],$Vf1=[2,49],$Vg1=[1,169],$Vh1=[1,172],$Vi1=[1,171],$Vj1=[17,62,67],$Vk1=[51,56],$Vl1=[2,82],$Vm1=[1,206],$Vn1=[99,100,101,103,104,105,106,107,108,109,110,111,112,113],$Vo1=[2,75],$Vp1=[20,44,51,56,64,91,99,100,101,103,104,105,106,107,108,109,110],$Vq1=[20,44,51,56,64,91,99,100,101,103,104,105,106,107,108],$Vr1=[1,244],$Vs1=[1,255],$Vt1=[1,253],$Vu1=[1,264],$Vv1=[2,151],$Vw1=[1,274],$Vx1=[2,80],$Vy1=[1,306],$Vz1=[1,318],$VA1=[1,333],$VB1=[2,152],$VC1=[1,340],$VD1=[2,43],$VE1=[17,62],$VF1=[2,63],$VG1=[1,355],$VH1=[2,42],$VI1=[44,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"ini":4,"EOF":5,"linstrucciones":6,"instruccion":7,"instruccionB":8,"if":9,"switch":10,"for":11,"while":12,"do":13,"return":14,"func":15,"bloque":16,"LLAVE_C":17,"instruccionL":18,"RBREAK":19,"PTCOMA":20,"RCONTINUE":21,"call":22,"print":23,"println":24,"typeof":25,"incdec":26,"splice":27,"pop":28,"push":29,"graficarts":30,"tolower":31,"toupper":32,"round":33,"declaracionArray":34,"asignacion":35,"declaracion":36,"ternario":37,"tipo":38,"ldec":39,"asig":40,"RCONST":41,"IDENTIFICADOR":42,"CORCHETE_A":43,"CORCHETE_C":44,"ASIG":45,"asignacionArray":46,"asignacionMatriz":47,"RNEW":48,"expresion_logica":49,"lAsigArray":50,"COMA":51,"lAsigMatriz":52,"expresion_numerica":53,"RIF":54,"PARENTESIS_A":55,"PARENTESIS_C":56,"ifAux":57,"RELSE":58,"LLAVE_A":59,"RSWITCH":60,"lcase":61,"RCASE":62,"dato":63,"DOSPTS":64,"bodyBlock":65,"cdefault":66,"RDEFAULT":67,"RFOR":68,"for_declaracion":69,"for_incremento":70,"RWHILE":71,"RDO":72,"RRETURN":73,"lparametros":74,"RVOID":75,"RCALL":76,"largumentos":77,"RPRINT":78,"RPRINTLN":79,"RTYPEOF":80,"length":81,"RLENGTH":82,"tocharArray":83,"RTOCHARARRAY":84,"indexOf":85,"PUNTO":86,"RINDEXOF":87,"RPUSH":88,"RPOP":89,"RSPLICE":90,"INTERROGACION":91,"cuerpoTernario":92,"RGRAFICAR_TS":93,"RTOLOWER":94,"RTOUPPER":95,"roud":96,"RROUND":97,"expresin_relacional":98,"AND":99,"OR":100,"XOR":101,"NOT":102,"MAYOR":103,"MENOR":104,"MAYORI":105,"MENORI":106,"IGUAL":107,"DIF":108,"MENOS":109,"MAS":110,"MULT":111,"DIV":112,"MOD":113,"negacionDec":114,"tipoDec":115,"ENTERO":116,"DECIMAL":117,"CADENA":118,"CHAR":119,"RTRUE":120,"RFALSE":121,"RINT":122,"RDOUBLE":123,"RCHAR":124,"RBOOLEAN":125,"RSTRING":126,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"LLAVE_C",19:"RBREAK",20:"PTCOMA",21:"RCONTINUE",33:"round",41:"RCONST",42:"IDENTIFICADOR",43:"CORCHETE_A",44:"CORCHETE_C",45:"ASIG",48:"RNEW",51:"COMA",54:"RIF",55:"PARENTESIS_A",56:"PARENTESIS_C",58:"RELSE",59:"LLAVE_A",60:"RSWITCH",62:"RCASE",64:"DOSPTS",67:"RDEFAULT",68:"RFOR",71:"RWHILE",72:"RDO",73:"RRETURN",75:"RVOID",76:"RCALL",78:"RPRINT",79:"RPRINTLN",80:"RTYPEOF",82:"RLENGTH",84:"RTOCHARARRAY",86:"PUNTO",87:"RINDEXOF",88:"RPUSH",89:"RPOP",90:"RSPLICE",91:"INTERROGACION",93:"RGRAFICAR_TS",94:"RTOLOWER",95:"RTOUPPER",97:"RROUND",99:"AND",100:"OR",101:"XOR",102:"NOT",103:"MAYOR",104:"MENOR",105:"MAYORI",106:"MENORI",107:"IGUAL",108:"DIF",109:"MENOS",110:"MAS",111:"MULT",112:"DIV",113:"MOD",116:"ENTERO",117:"DECIMAL",118:"CADENA",119:"CHAR",120:"RTRUE",121:"RFALSE",122:"RINT",123:"RDOUBLE",124:"RCHAR",125:"RBOOLEAN",126:"RSTRING"},
productions_: [0,[3,2],[3,2],[4,1],[6,2],[6,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,1],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[7,1],[7,1],[36,3],[36,4],[34,6],[34,8],[46,5],[46,3],[50,3],[50,2],[47,8],[47,3],[52,5],[52,3],[39,3],[39,1],[40,2],[35,3],[35,6],[35,9],[9,5],[9,7],[9,7],[57,3],[57,1],[10,7],[61,6],[61,5],[66,3],[66,0],[11,11],[69,1],[69,1],[70,1],[70,3],[12,7],[13,9],[14,3],[14,2],[15,8],[15,8],[74,0],[74,4],[74,2],[16,3],[22,5],[77,3],[77,1],[77,0],[23,4],[24,4],[25,4],[81,4],[83,4],[85,6],[29,6],[28,5],[27,8],[65,1],[65,0],[37,5],[92,1],[92,1],[92,1],[92,1],[92,1],[30,3],[31,4],[32,4],[96,4],[49,3],[49,3],[49,3],[49,2],[49,1],[98,3],[98,3],[98,3],[98,3],[98,3],[98,3],[98,1],[53,2],[53,3],[53,3],[53,4],[53,3],[53,3],[53,3],[53,3],[53,4],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[114,3],[26,3],[26,2],[115,2],[115,2],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,1],[63,4],[63,7],[38,1],[38,1],[38,1],[38,1],[38,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return {
            tk : tokens, 
            err: errores, 
            ast: $$[$0-1],
        };
    
break;
case 2:

        var e = new Error(err_lexema, this._$.first_line, this._$.first_column, esperados, "Error sintactico");
    
break;
case 3:
this.$ = $$[$0]; 
break;
case 4:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 5: case 81:
 this.$ = [$$[$0]]
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 62: case 125: case 127: case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138:
 this.$ = $$[$0]; 
break;
case 14: case 33:
 
        console.log(`Se ha encontrado un error con: ${err_lexema} linea : ${this._$.first_line} columna: ${this._$.first_column} Esperados: ${esperados} `);
    
break;
case 15:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 16:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 17: case 18: case 19: case 20: case 21: case 23: case 24: case 30: case 32:
 this.$ = $$[$0-1]; 
break;
case 22:
 this.$ = $; 
break;
case 25: case 27: case 28: case 29: case 31: case 57: case 123:
 this.$ = $$[$0-1];
break;
case 26: case 34: case 35: case 65: case 66: case 67: case 92: case 95: case 96: case 97: case 98: case 99:
 this.$ = $$[$0];
break;
case 36:
 this.$ = new Declaracion($$[$0-1], $$[$0-2], $$[$0],false, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 37:
 this.$ = new Declaracion($$[$0-1], $$[$0-2], $$[$0],true, _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 38: case 39:


    
break;
case 48:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 49: case 58:
 this.$ = [$$[$0]];
break;
case 50: case 108: case 115: case 128:
this.$ = $$[$0];
break;
case 51: case 68:
 this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 54:
 this.$ = new If($$[$0-2], $$[$0], null, null, _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 55:
 this.$ = new If($$[$0-4], $$[$0-2], null, $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 56:
 this.$ = new If($$[$0-4], $$[$0-2], $$[$0], null, _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 59:

        this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 60:

        $$[$0-5].push(new Case($$[$0-3], $$[$0-1], $$[$0])); this.$ = $$[$0-5];
    
break;
case 61:
 
        this.$ = [new Case($$[$0-3], $$[$0-1], $$[$0])];
    
break;
case 64:

        this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column);
    
break;
case 69:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 70:
 this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 71:
 this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
 this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 73:

        this.$ = new Funcion($$[$0-6], $$[$0-7], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 74:
 

        this.$ = new Funcion($$[$0-6], $$[$0-7], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 76:
 $$[$0-3].push({value: $$[$0], type: $$[$0-1]}); this.$ = $$[$0-3];
break;
case 77:
 this.$ = [{value: $$[$0], type: $$[$0-1]}]
break;
case 78:
 this.$ = new Bloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 79:
 this.$ = new Llamada($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 80:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 83:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 84:
 this.$ = new Println($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 85:
 this.$ = new Typeof($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 94:

        this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 100:
 this.$ = new GraficarTs(_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 101:

        this.$ = new ToLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 102:
 
        this.$ = new ToUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 103:

        this.$ = new Round($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 104:
this.$ = new Logica($$[$0-2], $$[$0], LogicaOp.and,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 105:
this.$ = new Logica($$[$0-2], $$[$0], LogicaOp.or,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 106:
this.$ = new Logica($$[$0-2], $$[$0], LogicaOp.xor,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 107:
this.$ = new Logica($$[$0], $$[$0], LogicaOp.not,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 109:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionaOp.mayor, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 110:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionaOp.menor, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 111:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionaOp.mayori, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 112:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionaOp.menori, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 113:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionaOp.igual, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 114:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionaOp.dif, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 116:

        this.$ = new Aritmetica($$[$0], new Literal(-1, Type.NUMBER, 0, 0) , AritmeticOp.UMENOS, _$[$0-1].first_line, _$[$0-1].first_column)
    
break;
case 117:
 this.$ = new Aritmetica($$[$0-2], $$[$0], AritmeticOp.MAS,_$[$0-2].first_line, _$[$0-2].first_column )
break;
case 118:
 this.$ = new Aritmetica($$[$0-2], $$[$0], AritmeticOp.MENOS,_$[$0-2].first_line, _$[$0-2].first_column )
break;
case 119:
 this.$ = new Aritmetica($$[$0-3], $$[$0-1], AritmeticOp.POW,_$[$0-3].first_line, _$[$0-3].first_column )
break;
case 120:
 this.$ = new Aritmetica($$[$0-2], $$[$0], AritmeticOp.MULT,_$[$0-2].first_line, _$[$0-2].first_column )
break;
case 121:
 this.$ = new Aritmetica($$[$0-2], $$[$0], AritmeticOp.DIV,_$[$0-2].first_line, _$[$0-2].first_column )
break;
case 122:
 this.$ = new Aritmetica($$[$0-2], $$[$0], AritmeticOp.MOD,_$[$0-2].first_line, _$[$0-2].first_column )
break;
case 124:
 this.$ = new Llamada($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 126:
this.$= $$[$0];
break;
case 139:
 this.$ = new IncDec($$[$0],AritmeticOp.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 140:
 this.$ = new IncDec($$[$0], AritmeticOp.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 141:
 this.$ = new IncDec($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 142:
 this.$ = AritmeticOp.MAS 
break;
case 143:
 this.$ = AritmeticOp.MENOS
break;
case 144:
this.$ = new Literal($$[$0], Type.IDENTIFICADOR, _$[$0].first_line, _$[$0].first_column);
break;
case 145: case 146:
this.$ = new Literal($$[$0], Type.NUMBER, _$[$0].first_line, _$[$0].first_column);
break;
case 147:
this.$ = new Literal($$[$0], Type.STRING, _$[$0].first_line, _$[$0].first_column);
break;
case 148:
this.$ = new Literal($$[$0], Type.CHAR, _$[$0].first_line, _$[$0].first_column);
break;
case 149:
this.$ = new Literal($$[$0], Type.BOOLEAN, _$[$0].first_line, _$[$0].first_column);
break;
case 150:
 this.$ = new Literal($$[$0], Type.BOOLEAN, _$[$0].first_line, _$[$0].first_column);
break;
case 153:
 this.$ = Type.NUMBER;
break;
case 154:
 this.$ = Type.DECIMAL;
break;
case 155:
 this.$ = Type.CHAR;
break;
case 156:
 this.$ = Type.BOOLEAN;
break;
case 157:
 this.$ = Type.STRING;
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,18:7,19:$V0,21:$V1,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V2,34:30,35:31,36:32,37:33,38:40,41:$V3,42:$V4,49:54,53:48,54:$V5,55:$V6,59:$V7,60:$V8,63:62,68:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,93:$Vk,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},{1:[3]},{5:[1,78]},{5:[1,79],17:$VC,20:$VD},{2:$VE,5:[2,3],7:82,8:6,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,18:7,19:$V0,21:$V1,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V2,34:30,35:31,36:32,37:33,38:40,41:$V3,42:$V4,49:54,53:48,54:$V5,55:$V6,59:$V7,60:$V8,63:62,68:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,93:$Vk,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},o($VF,[2,5]),o($VF,[2,34]),o($VF,[2,35]),o($VF,[2,6]),o($VF,[2,7]),o($VF,[2,8]),o($VF,[2,9]),o($VF,[2,10]),o($VF,[2,11]),o($VF,[2,12]),o($VF,[2,13]),{20:[1,84]},{20:[1,85]},{20:[1,86]},{20:[1,87]},{20:[1,88]},o($VG,$VH,{20:[1,89]}),o($VG,$VI,{20:[1,90]}),o($VG,$VJ,{20:[1,91]}),o($VG,$VK,{20:[1,92]}),o($VG,$VL,{20:[1,93]}),{20:[1,94]},o([2,5,17,19,21,33,41,42,54,55,58,59,60,62,67,68,71,72,73,75,76,78,79,80,82,84,91,93,94,95,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,118,119,120,121,122,123,124,125,126],[2,26]),o($VG,$VM,{20:[1,95]}),{20:[1,96]},{20:[1,97]},{20:[1,98]},{20:[1,99]},o($VG,$VN,{20:[1,100]}),{55:[1,101]},{55:[1,102]},{55:[1,103]},{55:[1,104]},{59:[1,105]},{20:[1,107],25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:106,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{39:118,42:[1,117]},{42:[1,119]},{2:$VE,6:121,7:5,8:6,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:$VP,18:7,19:$V0,21:$V1,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V2,34:30,35:31,36:32,37:33,38:40,41:$V3,42:$V4,49:54,53:48,54:$V5,55:$V6,59:$V7,60:$V8,63:62,65:120,68:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,93:$Vk,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},{42:[1,122]},{55:[1,123]},{55:[1,124]},{55:[1,125]},{110:[1,126]},o([20,44,51,56,64,91,99,100,101],$VQ,{115:127,103:$VR,104:$VS,105:$VT,106:$VU,107:$VV,108:$VW,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),o($V01,$V11,{43:[1,141],45:$V21,55:$V31,86:$V41}),{55:[1,143]},{55:[1,144]},{55:[1,145]},{38:146,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},o($V51,$V61,{91:$V71}),o($V81,[2,153]),o($V81,[2,154]),o($V81,[2,155]),o($V81,[2,156]),o($V81,[2,157]),{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:148,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:149,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($V01,[2,126]),o($V01,[2,131]),o($V01,[2,132]),o($V01,[2,133]),o($V01,[2,135]),o([20,44,51,56,64,91,103,104,105,106,107,108,109,110,111,112,113],[2,108],{99:$V91,100:[1,151],101:$Va1}),{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:153,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($V01,[2,145]),o($V01,[2,146]),o($V01,[2,147]),o($V01,[2,148]),o($V01,[2,149]),o($V01,[2,150]),{55:[1,154]},{55:[1,155]},{55:[1,156]},{1:[2,1]},{1:[2,2]},o($VF,[2,14]),o($Vb1,[2,33]),o($VF,[2,4]),{17:$VC,20:$VD},o($Vb1,[2,15]),o($Vb1,[2,16]),o($Vb1,[2,17]),o($Vb1,[2,18]),o($Vb1,[2,19]),o($Vb1,[2,20]),o($Vb1,[2,21]),o($Vb1,[2,22]),o($Vb1,[2,23]),o($Vb1,[2,24]),o($Vb1,[2,25]),o($Vb1,[2,27]),o($Vb1,[2,28]),o($Vb1,[2,29]),o($Vb1,[2,30]),o($Vb1,[2,31]),o($Vb1,[2,32]),{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:157,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:158,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{35:161,36:160,38:162,41:$V3,42:[1,163],69:159,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:164,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{2:$VE,6:121,7:5,8:6,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:$VP,18:7,19:$V0,21:$V1,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V2,34:30,35:31,36:32,37:33,38:40,41:$V3,42:$V4,49:54,53:48,54:$V5,55:$V6,59:$V7,60:$V8,63:62,65:165,68:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,93:$Vk,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},o($Vc1,$VQ,{115:127,20:[1,166],103:$VR,104:$VS,105:$VT,106:$VU,107:$VV,108:$VW,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),o($VF,[2,72]),o($V01,$V11,{43:$Vd1,55:$V31,86:$V41}),o($V01,$VH),o($V01,$VI),o($V01,$VM),o($V01,[2,130]),o($V01,$VL),o($V01,$VK),o($V01,$VJ),o($V01,$VN),o($Ve1,$Vf1,{43:$Vg1,55:[1,168]}),{40:170,45:$Vh1,51:$Vi1},{55:[1,173]},{17:[1,174]},o($Vj1,[2,92],{8:6,18:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,34:30,35:31,36:32,37:33,38:40,53:48,49:54,63:62,96:63,81:64,83:65,85:66,98:67,7:82,2:$VE,19:$V0,21:$V1,33:$V2,41:$V3,42:$V4,54:$V5,55:$V6,59:$V7,60:$V8,68:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,82:$Vi,84:$Vj,93:$Vk,94:$Vl,95:$Vm,97:$Vn,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB}),{55:[1,175]},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:176,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:177,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:178,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:179,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($V01,[2,141]),{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:180,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:[1,181],116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:182,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:[1,183],110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:185,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,111:[1,184],116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:186,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:187,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:188,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:189,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:190,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:191,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:192,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:193,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{87:[1,197],88:[1,196],89:[1,195],90:[1,194]},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:198,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:199,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($Vk1,$Vl1,{49:54,63:62,96:63,81:64,83:65,85:66,98:67,25:109,26:110,32:111,31:112,29:113,28:114,27:115,37:116,77:200,53:201,42:$VO,55:$V6,80:$Vh,82:$Vi,84:$Vj,94:$Vl,95:$Vm,97:$Vn,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw}),{56:[1,202]},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:203,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:204,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{39:205,42:$Vm1},{22:212,23:210,24:209,25:109,26:110,27:115,28:114,29:113,31:112,32:111,35:211,37:116,42:$V4,49:208,53:48,55:$V6,63:62,76:$Ve,78:$Vf,79:$Vg,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,92:207,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($V01,[2,116],{115:127}),o($Vn1,$V61,{56:[1,213],91:$V71}),{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:214,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:215,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:216,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($V01,[2,107]),{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:217,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:218,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:219,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($Vn1,$V61,{56:[1,220],91:$V71}),o($Vc1,$VQ,{115:127,56:[1,221],103:$VR,104:$VS,105:$VT,106:$VU,107:$VV,108:$VW,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),{20:[1,222]},{20:[2,65]},{20:[2,66]},{39:118,42:$Vm1},{43:[1,223],45:$V21},o($Vn1,$V61,{56:[1,224],91:$V71}),{17:[1,225]},o($VF,[2,71]),{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:226,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($Vk1,$Vo1,{74:227,38:228,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB}),{44:[1,229]},{20:[2,36]},{42:[1,230]},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:231,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($Vk1,$Vo1,{38:228,74:232,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB}),o($VF,[2,78]),o($Vk1,$Vl1,{49:54,63:62,96:63,81:64,83:65,85:66,98:67,25:109,26:110,32:111,31:112,29:113,28:114,27:115,37:116,53:201,77:233,42:$VO,55:$V6,80:$Vh,82:$Vi,84:$Vj,94:$Vl,95:$Vm,97:$Vn,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw}),o($Vn1,$V61,{56:[1,234],91:$V71}),o($Vn1,$V61,{56:[1,235],91:$V71}),o($Vn1,$V61,{56:[1,236],91:$V71}),o($Vp1,[2,140],{115:127,111:$VZ,112:$V_,113:$V$}),o($Vp1,[2,117],{115:127,111:$VZ,112:$V_,113:$V$}),o($V01,[2,142]),o($Vp1,[2,118],{115:127,111:$VZ,112:$V_,113:$V$}),o($V01,[2,143],{49:54,63:62,96:63,81:64,83:65,85:66,98:67,25:109,26:110,32:111,31:112,29:113,28:114,27:115,37:116,53:148,42:$VO,55:$V6,80:$Vh,82:$Vi,84:$Vj,94:$Vl,95:$Vm,97:$Vn,102:$Vo,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw}),{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:237,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($V01,[2,120],{115:127}),o($V01,[2,121],{115:127}),o($V01,[2,122],{115:127}),o($Vq1,[2,109],{115:127,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),o($Vq1,[2,110],{115:127,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),o($Vq1,[2,111],{115:127,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),o($Vq1,[2,112],{115:127,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),o($Vq1,[2,113],{115:127,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),o($Vq1,[2,114],{115:127,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),{55:[1,238]},{55:[1,239]},{55:[1,240]},{55:[1,241]},o($V51,[2,51],{91:$V71}),o($Vc1,$VQ,{115:127,44:[1,242],103:$VR,104:$VS,105:$VT,106:$VU,107:$VV,108:$VW,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),{51:$Vr1,56:[1,243]},o([51,56,91,99,100,101],[2,81],{115:127,103:$VR,104:$VS,105:$VT,106:$VU,107:$VV,108:$VW,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),{20:[2,100]},o($Vn1,$V61,{56:[1,245],91:$V71}),o($Vn1,$V61,{56:[1,246],91:$V71}),{40:247,45:$Vh1,51:$Vi1},o($Ve1,$Vf1),{64:[1,248]},o($V51,[2,95],{91:$V71}),o($V01,[2,96]),o($V01,[2,97]),o($V01,[2,98]),o($V01,[2,99]),o($V01,[2,123]),o([20,44,51,56,64,91,99,100,103,104,105,106,107,108,109,110,111,112,113],[2,104],{101:$Va1}),o([20,44,51,56,64,91,100,103,104,105,106,107,108,109,110,111,112,113],[2,105],{99:$V91,101:$Va1}),o($V01,[2,106]),o($Vn1,$V61,{56:[1,249],91:$V71}),o($Vn1,$V61,{56:[1,250],91:$V71}),o($Vn1,$V61,{56:[1,251],91:$V71}),{2:$Vs1,18:254,19:$V0,21:$V1,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V2,34:30,35:31,36:32,37:33,38:256,41:$V3,42:$V4,49:54,53:48,55:$V6,57:252,59:$Vt1,63:62,76:$Ve,78:$Vf,79:$Vg,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,93:$Vk,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},{59:[1,257]},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:258,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:259,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{59:[1,260]},{71:[1,261]},o($Vc1,$VQ,{115:127,44:[1,262],103:$VR,104:$VS,105:$VT,106:$VU,107:$VV,108:$VW,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),{51:$Vu1,56:[1,263]},{42:[1,265]},{43:[1,267],45:[1,266]},o($Ve1,[2,48]),o($Vn1,$V61,{20:[2,50],91:$V71}),{51:$Vu1,56:[1,268]},{51:$Vr1,56:[1,269]},o($V01,[2,83]),o($V01,[2,84]),o($V01,[2,85]),o($V01,[2,119],{115:127}),{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:270,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{56:[1,271]},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:272,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:273,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($V01,$Vv1,{43:[1,275],45:$Vw1}),o($V01,[2,124]),{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:276,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o([2,5,17,19,20,21,33,41,42,44,51,54,55,56,58,59,60,62,64,67,68,71,72,73,75,76,78,79,80,82,84,91,93,94,95,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,118,119,120,121,122,123,124,125,126],[2,101]),o($V01,[2,102]),{20:[2,37]},{22:212,23:210,24:209,25:109,26:110,27:115,28:114,29:113,31:112,32:111,35:211,37:116,42:$V4,49:208,53:48,55:$V6,63:62,76:$Ve,78:$Vf,79:$Vg,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,92:277,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($V01,[2,103]),o($V01,[2,86]),o($V01,[2,87]),o($VF,[2,54],{58:[1,278]}),{2:$VE,6:279,7:5,8:6,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,18:7,19:$V0,21:$V1,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V2,34:30,35:31,36:32,37:33,38:40,41:$V3,42:$V4,49:54,53:48,54:$V5,55:$V6,59:$V7,60:$V8,63:62,68:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,93:$Vk,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},o($Vb1,[2,58]),{20:$VD},{39:118,42:[1,280]},{61:281,62:[1,282]},o($Vn1,$V61,{20:[1,283],91:$V71}),o($Vc1,$VQ,{115:127,44:[1,284],103:$VR,104:$VS,105:$VT,106:$VU,107:$VV,108:$VW,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),{2:$VE,6:121,7:5,8:6,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:$VP,18:7,19:$V0,21:$V1,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V2,34:30,35:31,36:32,37:33,38:40,41:$V3,42:$V4,49:54,53:48,54:$V5,55:$V6,59:$V7,60:$V8,63:62,65:285,68:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,93:$Vk,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},{55:[1,286]},o($V01,$Vv1,{43:[1,287]}),{59:[1,288]},{38:289,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},o($Vk1,[2,77]),{43:[1,292],46:290,48:[1,291]},{44:[1,293]},{59:[1,294]},o($V01,[2,79]),o($Vn1,$V61,{51:[1,295],91:$V71}),o($V01,[2,90]),o($Vn1,$V61,{56:[1,296],91:$V71}),o($Vn1,$V61,{56:[1,297],91:$V71}),{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:298,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:299,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($Vc1,$VQ,{115:127,51:$Vx1,56:$Vx1,103:$VR,104:$VS,105:$VT,106:$VU,107:$VV,108:$VW,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),o($V01,[2,94]),{2:$Vs1,9:300,18:254,19:$V0,21:$V1,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V2,34:30,35:31,36:32,37:33,38:256,41:$V3,42:$V4,49:54,53:48,54:$V5,55:$V6,57:301,59:$Vt1,63:62,76:$Ve,78:$Vf,79:$Vg,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,93:$Vk,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},{2:$VE,7:82,8:6,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:[1,302],18:7,19:$V0,21:$V1,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V2,34:30,35:31,36:32,37:33,38:40,41:$V3,42:$V4,49:54,53:48,54:$V5,55:$V6,59:$V7,60:$V8,63:62,68:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,93:$Vk,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},o($Ve1,$Vf1,{43:$Vg1}),{17:[1,303],62:[1,304]},{42:$Vy1,63:305,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:[1,309],49:54,53:308,55:$V6,63:62,70:307,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{43:[1,310],45:$Vw1},{17:[1,311]},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:312,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:313,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{2:$VE,6:121,7:5,8:6,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:$VP,18:7,19:$V0,21:$V1,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V2,34:30,35:31,36:32,37:33,38:40,41:$V3,42:$V4,49:54,53:48,54:$V5,55:$V6,59:$V7,60:$V8,63:62,65:314,68:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,93:$Vk,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},{42:[1,315]},{20:[2,38]},{38:316,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},{50:317,51:$Vz1},{45:[1,319]},{2:$VE,6:121,7:5,8:6,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:$VP,18:7,19:$V0,21:$V1,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V2,34:30,35:31,36:32,37:33,38:40,41:$V3,42:$V4,49:54,53:48,54:$V5,55:$V6,59:$V7,60:$V8,63:62,65:320,68:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,93:$Vk,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:321,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($V01,[2,89]),o($V01,[2,88]),o($V51,[2,52],{91:$V71}),o($Vc1,$VQ,{115:127,44:[1,322],103:$VR,104:$VS,105:$VT,106:$VU,107:$VV,108:$VW,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),o($VF,[2,55]),o($VF,[2,56]),o($Vb1,[2,57]),o($VF,[2,59]),{42:$Vy1,63:323,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{64:[1,324]},{43:$Vd1,64:$V11},{56:[1,325]},o([56,91,99,100,101],[2,67],{115:127,103:$VR,104:$VS,105:$VT,106:$VU,107:$VV,108:$VW,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),o([56,91,99,100,101,103,104,105,106,107,108,109,110,111,112,113],$V11,{43:$Vd1,45:[1,326],55:$V31,86:$V41}),{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:54,53:327,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($VF,[2,69]),o($Vn1,$V61,{56:[1,328],91:$V71}),o($Vc1,$VQ,{115:127,44:[1,329],103:$VR,104:$VS,105:$VT,106:$VU,107:$VV,108:$VW,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),{17:[1,330]},o($Vk1,[2,76]),{43:[1,331]},{44:[1,332],51:$VA1},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:334,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{43:[1,337],47:335,48:[1,336]},{17:[1,338]},o($Vn1,$V61,{56:[1,339],91:$V71}),o($V01,$VB1,{45:$VC1}),{64:[1,341]},o($Vj1,$VP,{7:5,8:6,18:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,34:30,35:31,36:32,37:33,38:40,53:48,49:54,63:62,96:63,81:64,83:65,85:66,98:67,6:121,65:342,2:$VE,19:$V0,21:$V1,33:$V2,41:$V3,42:$V4,54:$V5,55:$V6,59:$V7,60:$V8,68:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,82:$Vi,84:$Vj,93:$Vk,94:$Vl,95:$Vm,97:$Vn,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB}),{59:[1,343]},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:344,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($Vc1,$VQ,{115:127,44:[1,345],103:$VR,104:$VS,105:$VT,106:$VU,107:$VV,108:$VW,109:$VX,110:$VY,111:$VZ,112:$V_,113:$V$}),{20:[1,346]},o($V01,$VB1),o($VF,[2,73]),{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:347,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{20:[2,41]},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:348,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($Vn1,$V61,{44:$VD1,51:$VD1,91:$V71}),{20:[2,39]},{38:349,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},{43:[1,351],52:350},o($VF,[2,74]),o($V01,[2,91]),{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:352,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($Vj1,$VP,{7:5,8:6,18:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,34:30,35:31,36:32,37:33,38:40,53:48,49:54,63:62,96:63,81:64,83:65,85:66,98:67,6:121,65:353,2:$VE,19:$V0,21:$V1,33:$V2,41:$V3,42:$V4,54:$V5,55:$V6,59:$V7,60:$V8,68:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,82:$Vi,84:$Vj,93:$Vk,94:$Vl,95:$Vm,97:$Vn,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB}),o($VE1,$VF1,{66:354,67:$VG1}),{2:$VE,6:121,7:5,8:6,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:$VP,18:7,19:$V0,21:$V1,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,33:$V2,34:30,35:31,36:32,37:33,38:40,41:$V3,42:$V4,49:54,53:48,54:$V5,55:$V6,59:$V7,60:$V8,63:62,65:356,68:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,93:$Vk,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB},o($Vn1,$V61,{56:[2,68],91:$V71}),{45:$VC1},o($VF,[2,70]),o($Vn1,$V61,{44:[1,357],91:$V71}),o($Vn1,$V61,{44:$VH1,51:$VH1,91:$V71}),{43:[1,358]},{44:[1,359],51:[1,360]},{50:361,51:$Vz1},o($V51,[2,53],{91:$V71}),o($VE1,$VF1,{66:362,67:$VG1}),o($VE1,[2,61]),{64:[1,363]},{17:[1,364]},{20:[2,40]},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:365,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},{20:[2,45]},{43:[1,366]},{44:[1,367],51:$VA1},o($VE1,[2,60]),o($VE1,$VP,{7:5,8:6,18:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:25,30:26,31:27,32:28,34:30,35:31,36:32,37:33,38:40,53:48,49:54,63:62,96:63,81:64,83:65,85:66,98:67,6:121,65:368,2:$VE,19:$V0,21:$V1,33:$V2,41:$V3,42:$V4,54:$V5,55:$V6,59:$V7,60:$V8,68:$V9,71:$Va,72:$Vb,73:$Vc,75:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,82:$Vi,84:$Vj,93:$Vk,94:$Vl,95:$Vm,97:$Vn,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw,122:$Vx,123:$Vy,124:$Vz,125:$VA,126:$VB}),o($VF,[2,64]),o($Vn1,$V61,{44:[1,369],91:$V71}),{50:370,51:$Vz1},o($VI1,[2,47]),o($VE1,[2,62]),{43:[1,371]},{44:[1,372],51:$VA1},{25:109,26:110,27:115,28:114,29:113,31:112,32:111,37:116,42:$VO,49:373,53:48,55:$V6,63:62,80:$Vh,81:64,82:$Vi,83:65,84:$Vj,85:66,94:$Vl,95:$Vm,96:63,97:$Vn,98:67,102:$Vo,109:$Vp,110:$Vq,116:$Vr,117:$Vs,118:$Vt,119:$Vu,120:$Vv,121:$Vw},o($VI1,[2,46]),o($Vn1,$V61,{44:[1,374],91:$V71}),{20:[2,44]}],
defaultActions: {78:[2,1],79:[2,2],160:[2,65],161:[2,66],170:[2,36],202:[2,100],247:[2,37],290:[2,38],332:[2,41],335:[2,39],357:[2,40],359:[2,45],374:[2,44]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
		    esperados = [...expected];
		    err_lexema = this.terminals_[symbol];
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    // aqui se llama al arbol
    const Token = require('./Token').Token;
    const Error = require('./Error').Error;
    const {Literal} = require('../expresiones/Literal');
    const {Type} = require('../symbols/Type');
    const {Declaracion} = require('../instrucciones/Declaracion');
    const {Singleton} = require('../singleton/Singleton');
    const {Bloque} = require('../instrucciones/Bloque');
    const {Asignacion} = require('../instrucciones/Asignacion');
    const {IncDec} = require('../instrucciones/IncDec');
    const {While} = require('../instrucciones/While');
    const {Return} = require('../instrucciones/Return');
    const {Break} = require('../instrucciones/Break');
    const {Continue} = require('../instrucciones/Continue');
    const {If} = require('../instrucciones/If');
    const {DoWhile} = require('../instrucciones/DoWhile');
    const {For} = require('../instrucciones/For');
    const {Funcion} = require('../instrucciones/Funcion');
    const {Llamada} = require('../instrucciones/Llamada');
    const {Switch, Case } = require('../instrucciones/Switch');
    const { ToLower } = require('../instrucciones/ToLower');
    const { ToUpper } = require('../instrucciones/ToUpper');
    const { Round } = require('../instrucciones/Round');
    const { GraficarTs } = require("../instrucciones/GraficarTs");
    const { Ternario } = require('../instrucciones/Ternario');
// esto es un comentario 
    // expresiones 
    const {Aritmetica, AritmeticOp} = require('../expresiones/Aritmetica');
    const {Relacional, RelacionaOp} = require('../expresiones/Relacional');
    const {Logica, LogicaOp} = require('../expresiones/Logica');
    const { Print } = require('../instrucciones/Print');   
    const { Println } = require('../instrucciones/Println');   
    const { Typeof } = require('../instrucciones/Typeof');   
    
    let sg = Singleton.getInstance();    
    let tokens = [];
    let errores = sg.errores;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://se ignoran espacios en blanco
break;
case 1://Comentarios unilinea
break;
case 2://comentarios multilinea
break;
case 3: tokens.push(new Token('r_int', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 122;
break;
case 4: tokens.push(new Token('r_double', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 123;
break;
case 5: tokens.push(new Token('r_char', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 124;
break;
case 6: tokens.push(new Token('r_boolean', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 125;
break;
case 7: tokens.push(new Token('r_string', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 126;
break;
case 8: tokens.push(new Token('r_const', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 9: tokens.push(new Token('r_if', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 10: tokens.push(new Token('r_else', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 58;
break;
case 11: tokens.push(new Token('r_null', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'RNULL';
break;
case 12: tokens.push(new Token('r_switch', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 13: tokens.push(new Token('r_case', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 14: tokens.push(new Token('r_default', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67;
break;
case 15: tokens.push(new Token('r_for', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68;
break;
case 16: tokens.push(new Token('r_while', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71;
break;
case 17: tokens.push(new Token('r_true', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 120;
break;
case 18: tokens.push(new Token('r_false', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 121;
break;
case 19: tokens.push(new Token('r_do', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 72;
break;
case 20: tokens.push(new Token('r_continue', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 21;
break;
case 21: tokens.push(new Token('r_void', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 75;
break;
case 22: tokens.push(new Token('r_return', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73;
break;
case 23: tokens.push(new Token('r_call', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 76;
break;
case 24: tokens.push(new Token('r_break', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 19;
break;
case 25: tokens.push(new Token('r_println', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 79;
break;
case 26: tokens.push(new Token('r_print', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 78;
break;
case 27: tokens.push(new Token('r_typeof', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 80;
break;
case 28: tokens.push(new Token('r_null', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'RNULL';
break;
case 29: tokens.push(new Token('r_graficar_ts', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 93;
break;
case 30: tokens.push(new Token('r_tolower', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 94;
break;
case 31: tokens.push(new Token('r_toupper', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 95;
break;
case 32: tokens.push(new Token('r_round', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 97;
break;
case 33: tokens.push(new Token('r_length', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82;
break;
case 34: tokens.push(new Token('r_tochararray', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 84;
break;
case 35: tokens.push(new Token('r_indexof', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 87;
break;
case 36: tokens.push(new Token('r_push', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 88;
break;
case 37: tokens.push(new Token('r_pop', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 89;
break;
case 38: tokens.push(new Token('r_splice', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 90;
break;
case 39: tokens.push(new Token('tk_;', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 20;
break;
case 40: tokens.push(new Token('tk_,', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 41: tokens.push(new Token('tk_(', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 55;
break;
case 42: tokens.push(new Token('tk_)', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 56;
break;
case 43: tokens.push(new Token('tk_{', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59;
break;
case 44: tokens.push(new Token('tk_}', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 17;
break;
case 45: tokens.push(new Token('tk_:', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64;
break;
case 46: tokens.push(new Token('tk_?', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 91;
break;
case 47: tokens.push(new Token('tk_[', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 43;
break;
case 48: tokens.push(new Token('tk_]', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44;
break;
case 49: tokens.push(new Token('tk_.', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 86;
break;
case 50: tokens.push(new Token('tk_>=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 105; 
break;
case 51: tokens.push(new Token('tk_<=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 106; 
break;
case 52: tokens.push(new Token('tk_==', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 107; 
break;
case 53: tokens.push(new Token('tk_!=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 108; 
break;
case 54: tokens.push(new Token('tk_>', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 103; 
break;
case 55: tokens.push(new Token('tk_<', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 104; 
break;
case 56: tokens.push(new Token('tk_=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45; 
break;
case 57: tokens.push(new Token('tk_and', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 99; 
break;
case 58: tokens.push(new Token('tk_or', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 100; 
break;
case 59: tokens.push(new Token('tk_not', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 102; 
break;
case 60: tokens.push(new Token('tk_xor', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 101; 
break;
case 61: tokens.push(new Token('tk_+', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 110; 
break;
case 62: tokens.push(new Token('tk_-', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 109; 
break;
case 63: tokens.push(new Token('tk_*', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 111; 
break;
case 64: tokens.push(new Token('tk_/', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 112; 
break;
case 65: tokens.push(new Token('tk_**', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'POW'; 
break;
case 66: tokens.push(new Token('tk_%', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 113; 
break;
case 67: tokens.push(new Token('tk_--', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'DEC'; 
break;
case 68: tokens.push(new Token('tk_identificador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42; 
break;
case 69: tokens.push(new Token('tk_decimal', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 117; 
break;
case 70: tokens.push(new Token('tk_entero', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 116; 
break;
case 71:  /*yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2);*/ tokens.push(new Token('tk_cadena', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
                                return 118;                           
                            
break;
case 72: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); tokens.push(new Token('tk_char', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
                                return 119; 
                            
break;
case 73:return 5;
break;
case 74: 
                                errores.push(new Error(yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column, 'Caracter Desconocido', 'Error Lexico'));
                            
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:null\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:call\b)/i,/^(?:break\b)/i,/^(?:Println\b)/i,/^(?:Print\b)/i,/^(?:Typeof\b)/i,/^(?:null\b)/i,/^(?:graficar_ts\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:tochararray\b)/i,/^(?:indexof\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:splice\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?::)/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\*\*)/i,/^(?:%)/i,/^(?:--)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:"((\\")|[^\"\n])*")/i,/^(?:(('([^]|\\\\|\\t|\\n|\\r|\\)')|''))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
