/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,20],$V2=[1,23],$V3=[1,24],$V4=[1,25],$V5=[1,45],$V6=[1,32],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,33],$Ve=[1,34],$Vf=[1,35],$Vg=[1,36],$Vh=[1,49],$Vi=[1,38],$Vj=[1,37],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,40],$Vr=[1,41],$Vs=[1,42],$Vt=[1,43],$Vu=[1,44],$Vv=[5,23,24,29,31,34,35,37,39,41,44,48,51,52,53,55,56,58,59,60,65,72,73,77,78,79,80,81,82,83,84,85,86,87],$Vw=[62,63,64,66,67,68,69,70,71,72,73,74,75,76],$Vx=[2,84],$Vy=[2,80],$Vz=[2,89],$VA=[1,65],$VB=[1,66],$VC=[1,75],$VD=[2,59],$VE=[1,85],$VF=[22,30,36,62,63,64],$VG=[2,71],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[1,96],$VM=[1,97],$VN=[1,88],$VO=[1,87],$VP=[1,89],$VQ=[1,90],$VR=[1,91],$VS=[22,30,36,62,63,64,66,67,68,69,70,71,72,73,74,75,76],$VT=[2,81],$VU=[22,30,36,66,67,68,69,70,71,72,73,74,75,76],$VV=[1,99],$VW=[1,100],$VX=[1,101],$VY=[22,30,36,46,62,63,64,66,67,68,69,70,71,72,73,74,75,76],$VZ=[2,26],$V_=[1,104],$V$=[1,105],$V01=[22,30,32],$V11=[2,25],$V21=[1,108],$V31=[62,63,64],$V41=[39,44],$V51=[22,30,36,62,63,64,72,73,74,75,76],$V61=[2,72],$V71=[22,30,36,62,63,66,67,68,69,70,71,72,73,74,75,76],$V81=[30,36],$V91=[2,48],$Va1=[1,156],$Vb1=[31,35,60,65,72,73,77,78,79,80,81,82],$Vc1=[22,30,36,62,63,64,72,73],$Vd1=[22,30,36,62,63,64,72,73,74,75],$Ve1=[1,169],$Vf1=[2,53],$Vg1=[1,203];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"s":3,"ini":4,"EOF":5,"linstrucciones":6,"instruccion":7,"declaracion":8,"asignacion":9,"if":10,"switch":11,"for":12,"while":13,"do":14,"return":15,"func":16,"bloque":17,"call":18,"print":19,"println":20,"typeof":21,"PTCOMA":22,"RBREAK":23,"RCONTINUE":24,"incdec":25,"tipo":26,"ldec":27,"asig":28,"RCONST":29,"COMA":30,"IDENTIFICADOR":31,"ASIG":32,"expresion_logica":33,"RIF":34,"PARENTESIS_A":35,"PARENTESIS_C":36,"LLAVE_A":37,"bodyBlock":38,"LLAVE_C":39,"RELSE":40,"RSWITCH":41,"expresion_numerica":42,"lcase":43,"RCASE":44,"dato":45,"DOSPTS":46,"RDEFAULT":47,"RFOR":48,"for_declaracion":49,"for_incremento":50,"RWHILE":51,"RDO":52,"RRETURN":53,"lparametros":54,"RVOID":55,"RCALL":56,"largumentos":57,"RPRINT":58,"RPRINTLN":59,"RTYPEOF":60,"expresin_relacional":61,"AND":62,"OR":63,"XOR":64,"NOT":65,"MAYOR":66,"MENOR":67,"MAYORI":68,"MENORI":69,"IGUAL":70,"DIF":71,"MENOS":72,"MAS":73,"MULT":74,"DIV":75,"MOD":76,"ENTERO":77,"DECIMAL":78,"CADENA":79,"CHAR":80,"RTRUE":81,"RFALSE":82,"RINT":83,"RDOUBLE":84,"RCHAR":85,"RBOOLEAN":86,"RSTRING":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:"PTCOMA",23:"RBREAK",24:"RCONTINUE",29:"RCONST",30:"COMA",31:"IDENTIFICADOR",32:"ASIG",34:"RIF",35:"PARENTESIS_A",36:"PARENTESIS_C",37:"LLAVE_A",39:"LLAVE_C",40:"RELSE",41:"RSWITCH",44:"RCASE",46:"DOSPTS",47:"RDEFAULT",48:"RFOR",51:"RWHILE",52:"RDO",53:"RRETURN",55:"RVOID",56:"RCALL",58:"RPRINT",59:"RPRINTLN",60:"RTYPEOF",62:"AND",63:"OR",64:"XOR",65:"NOT",66:"MAYOR",67:"MENOR",68:"MAYORI",69:"MENORI",70:"IGUAL",71:"DIF",72:"MENOS",73:"MAS",74:"MULT",75:"DIV",76:"MOD",77:"ENTERO",78:"DECIMAL",79:"CADENA",80:"CHAR",81:"RTRUE",82:"RFALSE",83:"RINT",84:"RDOUBLE",85:"RCHAR",86:"RBOOLEAN",87:"RSTRING"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[7,2],[8,4],[8,5],[27,3],[27,1],[28,0],[28,2],[9,4],[10,7],[10,5],[10,9],[10,11],[11,7],[43,5],[43,3],[43,4],[12,10],[49,1],[49,1],[50,1],[50,1],[13,7],[14,9],[15,3],[15,2],[16,8],[16,8],[54,0],[54,4],[54,2],[17,3],[18,6],[57,3],[57,1],[19,5],[20,5],[21,4],[38,1],[38,0],[33,3],[33,3],[33,3],[33,2],[33,1],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[61,1],[42,2],[42,3],[42,3],[42,4],[42,3],[42,3],[42,3],[42,3],[42,1],[42,1],[42,4],[42,1],[42,1],[25,3],[25,3],[25,3],[25,3],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[26,1],[26,1],[26,1],[26,1],[26,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return {
            tk : tokens, 
            err: errores, 
            ast: $$[$0-1],
        };
    
break;
case 2:
this.$ = $$[$0]; 
break;
case 3:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 4:
 this.$ = [$$[$0]]
break;
case 5: case 38: case 39: case 40: case 41: case 58: case 81:
 this.$ = $$[$0];
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 13: case 14: case 15: case 16: case 17: case 84:
 this.$ = $$[$0]; 
break;
case 12:
 this.$ = $$[$0]; /*tener especial cuidado en como manejo esto*/
break;
case 18: case 21:
 this.$ = $$[$0-1]; 
break;
case 19:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 20:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 22:
 this.$ = new Declaracion($$[$0-2], $$[$0-3], $$[$0-1],false, _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 23:
 this.$ = new Declaracion($$[$0-2], $$[$0-3], $$[$0-1],true, _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 24:
 $$[$0-2].push($$[$0]); this.$=$$[$0-2]; 
break;
case 25:
 this.$ = [$$[$0]];
break;
case 27: case 64: case 71: case 80:
this.$ = $$[$0];
break;
case 28:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 29:
 this.$ = new If($$[$0-4], $$[$0-1], null, null, _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 30:
 this.$ = new If($$[$0-2], $$[$0], null, null, _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 31:
 this.$ = new If($$[$0-6], $$[$0-3], null, $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 32:
 this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], null, _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 37:

        this.$ = new For($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column);
    
break;
case 42:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 43:
 this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 44:
 this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 45:
 this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 51:
 this.$ = new Bloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 55:
 this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 56:
 this.$ = new Println($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 57:
 this.$ = new Typeof($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 60:
this.$ = new Logica($$[$0-2], $$[$0], LogicaOp.and,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 61:
this.$ = new Logica($$[$0-2], $$[$0], LogicaOp.or,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 62:
this.$ = new Logica($$[$0-2], $$[$0], LogicaOp.xor,_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 63:
this.$ = new Logica($$[$0], $$[$0], LogicaOp.not,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 65:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionaOp.mayor, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 66:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionaOp.menor, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 67:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionaOp.mayori, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 68:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionaOp.menori, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 69:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionaOp.igual, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 70:
this.$ = new Relacional($$[$0-2], $$[$0], RelacionaOp.dif, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
this.$ = new Aritmetica($$[$0], -1, AritmeticOp.UMENOS, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 73:
 this.$ = new Aritmetica($$[$0-2], $$[$0], AritmeticOp.MAS,_$[$0-2].first_line, _$[$0-2].first_column )
break;
case 74:
 this.$ = new Aritmetica($$[$0-2], $$[$0], AritmeticOp.MENOS,_$[$0-2].first_line, _$[$0-2].first_column )
break;
case 75:
 this.$ = new Aritmetica($$[$0-3], $$[$0-1], AritmeticOp.POW,_$[$0-3].first_line, _$[$0-3].first_column )
break;
case 76:
 this.$ = new Aritmetica($$[$0-2], $$[$0], AritmeticOp.MULT,_$[$0-2].first_line, _$[$0-2].first_column )
break;
case 77:
 this.$ = new Aritmetica($$[$0-2], $$[$0], AritmeticOp.DIV,_$[$0-2].first_line, _$[$0-2].first_column )
break;
case 78:
 this.$ = new Aritmetica($$[$0-2], $$[$0], AritmeticOp.MOD,_$[$0-2].first_line, _$[$0-2].first_column )
break;
case 79:
 this.$ = $$[$0-1];
break;
case 83:
this.$= $$[$0];
break;
case 85:
 this.$ = new Incremento($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 86:
 this.$ = new Decremento($$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 87:
 this.$ = new Incremento($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 88:
 this.$ = new Decremento($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 89:
this.$ = new Literal($$[$0], Type.IDENTIFICADOR, _$[$0].first_line, _$[$0].first_column);
break;
case 90: case 91:
this.$ = new Literal($$[$0], Type.NUMBER, _$[$0].first_line, _$[$0].first_column);
break;
case 92:
this.$ = new Literal($$[$0], Type.STRING, _$[$0].first_line, _$[$0].first_column);
break;
case 93:
this.$ = new Literal($$[$0], Type.CHAR, _$[$0].first_line, _$[$0].first_column);
break;
case 94:
this.$ = new Literal($$[$0], Type.BOOLEAN, _$[$0].first_line, _$[$0].first_column);
break;
case 95:
 this.$ = new Literal($$[$0], Type.BOOLEAN, _$[$0].first_line, _$[$0].first_column);
break;
case 96:
 this.$ = Type.NUMBER;
break;
case 97:
 this.$ = Type.DECIMAL;
break;
case 98:
 this.$ = Type.CHAR;
break;
case 99:
 this.$ = Type.BOOLEAN;
break;
case 100:
 this.$ = Type.STRING;
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V0,24:$V1,25:21,26:22,29:$V2,31:$V3,33:46,34:$V4,35:$V5,37:$V6,41:$V7,42:39,45:47,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{1:[3]},{5:[1,56]},{5:[2,2],7:57,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V0,24:$V1,25:21,26:22,29:$V2,31:$V3,33:46,34:$V4,35:$V5,37:$V6,41:$V7,42:39,45:47,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},o($Vv,[2,4]),o($Vv,[2,5]),o($Vv,[2,6]),o($Vv,[2,7]),o($Vv,[2,8]),o($Vv,[2,9]),o($Vv,[2,10]),o($Vv,[2,11]),o($Vv,[2,12]),o($Vv,[2,13]),o($Vv,[2,14]),o($Vv,[2,15]),o($Vv,[2,16]),o($Vv,[2,17]),o($Vw,$Vx,{22:[1,58]}),{22:[1,59]},{22:[1,60]},o($Vw,$Vy,{22:[1,61]}),{27:62,31:[1,63]},{26:64,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},o([36,62,63,64,66,67,68,69,70,71,72,73,74,75,76],$Vz,{32:$VA,35:$VB}),{35:[1,67]},{35:[1,68]},{35:[1,69]},{35:[1,70]},{37:[1,71]},{21:76,22:[1,73],25:74,31:$VC,33:46,35:$V5,42:72,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{31:[1,77]},{6:79,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V0,24:$V1,25:21,26:22,29:$V2,31:$V3,33:46,34:$V4,35:$V5,37:$V6,38:78,39:$VD,41:$V7,42:39,45:47,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{31:[1,80]},{35:[1,81]},{35:[1,82]},{35:[1,83]},{73:[1,84]},{21:76,25:74,31:$VC,33:46,35:$V5,42:86,45:47,60:$Vg,61:48,65:$Vh,72:$VE,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},o($VF,$VG,{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR}),{31:[2,96]},{31:[2,97]},{31:[2,98]},{31:[2,99]},{31:[2,100]},{21:76,25:74,31:$VC,33:98,35:$V5,42:39,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},o($VS,$VT),o($VS,[2,83]),o($VU,[2,64],{62:$VV,63:$VW,64:$VX}),{21:76,25:74,31:$VC,33:46,35:$V5,42:39,45:47,60:$Vg,61:102,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},o($VY,[2,90]),o($VY,[2,91]),o($VY,[2,92]),o($VY,[2,93]),o($VY,[2,94]),o($VY,[2,95]),{1:[2,1]},o($Vv,[2,3]),o($Vv,[2,18]),o($Vv,[2,19]),o($Vv,[2,20]),o($Vv,[2,21]),{22:$VZ,28:103,30:$V_,32:$V$},o($V01,$V11,{35:[1,106]}),{27:107,31:$V21},{21:76,25:74,31:$VC,33:109,35:$V5,42:39,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:111,45:47,57:110,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:112,35:$V5,42:39,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:113,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{8:115,9:116,26:117,29:$V2,31:[1,118],49:114,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{21:76,25:74,31:$VC,33:119,35:$V5,42:39,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{6:79,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V0,24:$V1,25:21,26:22,29:$V2,31:$V3,33:46,34:$V4,35:$V5,37:$V6,38:120,39:$VD,41:$V7,42:39,45:47,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},o($V31,$VG,{22:[1,121],66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR}),o($Vv,[2,45]),o($VS,$Vy),o($VS,$Vz,{35:$VB}),o($VS,$Vx),{35:[1,122]},{39:[1,123]},o($V41,[2,58],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,25:21,26:22,42:39,33:46,45:47,61:48,7:57,23:$V0,24:$V1,29:$V2,31:$V3,34:$V4,35:$V5,37:$V6,41:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu}),{35:[1,124]},{21:76,25:74,31:$VC,33:125,35:$V5,42:39,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:126,35:$V5,42:39,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:127,35:$V5,42:39,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:128,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:129,45:47,60:$Vg,61:48,65:$Vh,72:$VE,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},o($V51,$V61,{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM}),{21:76,25:74,31:$VC,33:46,35:$V5,42:131,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:[1,130],77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:133,45:47,60:$Vg,61:48,65:$Vh,72:[1,132],73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:135,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,74:[1,134],77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:136,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:137,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:138,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:139,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:140,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:141,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:142,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:143,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},o($Vw,$VT,{36:[1,144]}),{21:76,25:74,31:$VC,33:46,35:$V5,42:39,45:47,60:$Vg,61:145,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:39,45:47,60:$Vg,61:146,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{21:76,25:74,31:$VC,33:46,35:$V5,42:39,45:47,60:$Vg,61:147,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},o($V71,[2,63],{64:$VX}),{22:[1,148]},{31:[1,149]},{21:76,25:74,31:$VC,33:150,35:$V5,42:39,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},o($V81,$V91,{54:151,26:152,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu}),{22:$VZ,28:153,30:$V_,32:$V$},o($V01,$V11),o($Vw,$VT,{22:[1,154]}),{30:$Va1,36:[1,155]},o([30,36,62,63,64],[2,54],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR}),o($Vw,$VT,{36:[1,157]}),o($V31,$VG,{36:[1,158],66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR}),{21:76,25:74,31:$VC,33:159,35:$V5,42:39,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},o($Vb1,[2,38]),o($Vb1,[2,39]),{27:62,31:$V21},{32:$VA},o($Vw,$VT,{36:[1,160]}),{39:[1,161]},o($Vv,[2,44]),o($V81,$V91,{26:152,54:162,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu}),o($Vv,[2,51]),{21:76,25:74,31:$VC,33:46,35:$V5,42:111,45:47,57:163,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},o($Vw,$VT,{36:[1,164]}),o($Vw,$VT,{36:[1,165]}),o($Vw,$VT,{36:[1,166]}),o($Vc1,[2,85],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VP,75:$VQ,76:$VR}),o($Vc1,[2,86],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$V61,75:$V61,76:$V61}),o($VS,[2,87]),o($Vc1,[2,73],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VP,75:$VQ,76:$VR}),o($VS,[2,88],{33:46,45:47,61:48,25:74,21:76,42:86,31:$VC,35:$V5,60:$Vg,65:$Vh,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp}),o($Vc1,[2,74],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,74:$VP,75:$VQ,76:$VR}),{21:76,25:74,31:$VC,33:46,35:$V5,42:167,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},o($Vd1,[2,76],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,76:$VR}),o($Vd1,[2,77],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,76:$VR}),o($V51,[2,78],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM}),o($VF,[2,65],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR}),o($VF,[2,66],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR}),o($VF,[2,67],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR}),o($VF,[2,68],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR}),o($VF,[2,69],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR}),o($VF,[2,70],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR}),o($VS,[2,79]),o($V71,[2,60],{64:$VX}),o([22,30,36,63,66,67,68,69,70,71,72,73,74,75,76],[2,61],{62:$VV,64:$VX}),o($VU,[2,62],{62:$VV,63:$VW,64:$VX}),o($Vv,[2,22]),o($V01,[2,24]),o($Vw,$VT,{22:[2,27]}),{30:$Ve1,36:[1,168]},{31:[1,170]},{22:[1,171]},o([5,23,24,29,31,34,35,36,37,39,41,44,48,51,52,53,55,56,58,59,60,65,72,73,77,78,79,80,81,82,83,84,85,86,87],[2,28]),o($VS,[2,82]),{21:76,25:74,31:$VC,33:46,35:$V5,42:172,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{7:174,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V0,24:$V1,25:21,26:22,29:$V2,31:$V3,33:46,34:$V4,35:$V5,37:[1,173],41:$V7,42:39,45:47,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{37:[1,175]},o($Vw,$VT,{22:[1,176]}),{37:[1,177]},{51:[1,178]},{30:$Ve1,36:[1,179]},{30:$Va1,36:[1,180]},{22:[1,181]},{22:[1,182]},o($VS,[2,57]),o($Vd1,[2,75],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,76:$VR}),{37:[1,183]},{26:184,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},o($V81,[2,50]),o($Vv,[2,23]),o($V31,$VG,{30:$Vf1,36:$Vf1,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR}),{6:79,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V0,24:$V1,25:21,26:22,29:$V2,31:$V3,33:46,34:$V4,35:$V5,37:$V6,38:185,39:$VD,41:$V7,42:39,45:47,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},o($Vv,[2,30]),{43:186,44:[1,188],47:[1,187]},{9:191,21:76,25:74,31:$V3,33:46,35:$V5,42:190,45:47,50:189,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{6:79,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V0,24:$V1,25:21,26:22,29:$V2,31:$V3,33:46,34:$V4,35:$V5,37:$V6,38:192,39:$VD,41:$V7,42:39,45:47,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{35:[1,193]},{37:[1,194]},{22:[1,195]},o($Vv,[2,55]),o($Vv,[2,56]),{6:79,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V0,24:$V1,25:21,26:22,29:$V2,31:$V3,33:46,34:$V4,35:$V5,37:$V6,38:196,39:$VD,41:$V7,42:39,45:47,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{31:[1,197]},{39:[1,198]},{39:[1,199],44:[1,200]},{46:[1,201]},{31:$Vg1,45:202,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{36:[1,204]},o([36,62,63,64],[2,40],{66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,74:$VP,75:$VQ,76:$VR}),{36:[2,41]},{39:[1,205]},{21:76,25:74,31:$VC,33:206,35:$V5,42:39,45:47,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},{6:79,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V0,24:$V1,25:21,26:22,29:$V2,31:$V3,33:46,34:$V4,35:$V5,37:$V6,38:207,39:$VD,41:$V7,42:39,45:47,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},o($Vv,[2,52]),{39:[1,208]},o($V81,[2,49]),o($Vv,[2,29],{40:[1,209]}),o($Vv,[2,33]),{31:$Vg1,45:210,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp},o($V41,$VD,{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,25:21,26:22,42:39,33:46,45:47,61:48,6:79,38:211,23:$V0,24:$V1,29:$V2,31:$V3,34:$V4,35:$V5,37:$V6,41:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu}),{46:[1,212]},{46:$Vz},{37:[1,213]},o($Vv,[2,42]),o($Vw,$VT,{36:[1,214]}),{39:[1,215]},o($Vv,[2,46]),{10:216,34:$V4,37:[1,217]},{46:[1,218]},o($V41,[2,35]),o($V41,$VD,{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,25:21,26:22,42:39,33:46,45:47,61:48,6:79,38:219,23:$V0,24:$V1,29:$V2,31:$V3,34:$V4,35:$V5,37:$V6,41:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu}),{6:79,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V0,24:$V1,25:21,26:22,29:$V2,31:$V3,33:46,34:$V4,35:$V5,37:$V6,38:220,39:$VD,41:$V7,42:39,45:47,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},{22:[1,221]},o($Vv,[2,47]),o($Vv,[2,31]),{6:79,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,23:$V0,24:$V1,25:21,26:22,29:$V2,31:$V3,33:46,34:$V4,35:$V5,37:$V6,38:222,39:$VD,41:$V7,42:39,45:47,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,61:48,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu},o($V41,$VD,{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,25:21,26:22,42:39,33:46,45:47,61:48,6:79,38:223,23:$V0,24:$V1,29:$V2,31:$V3,34:$V4,35:$V5,37:$V6,41:$V7,48:$V8,51:$V9,52:$Va,53:$Vb,55:$Vc,56:$Vd,58:$Ve,59:$Vf,60:$Vg,65:$Vh,72:$Vi,73:$Vj,77:$Vk,78:$Vl,79:$Vm,80:$Vn,81:$Vo,82:$Vp,83:$Vq,84:$Vr,85:$Vs,86:$Vt,87:$Vu}),o($V41,[2,36]),{39:[1,224]},o($Vv,[2,43]),{39:[1,225]},o($V41,[2,34]),o($Vv,[2,37]),o($Vv,[2,32])],
defaultActions: {40:[2,96],41:[2,97],42:[2,98],43:[2,99],44:[2,100],56:[2,1],191:[2,41],203:[2,89]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // aqui se llama al arbol
    const Token = require('./Token').Token;
    const Error = require('./Error').Error;
    const {Literal} = require('../expresiones/Literal');
    const {Type} = require('../symbols/Type');
    const {Declaracion} = require('../instrucciones/Declaracion');
    const {Singleton} = require('../singleton/Singleton');
    const {Bloque} = require('../instrucciones/Bloque');
    const {Asignacion} = require('../instrucciones/Asignacion');
    const { Incremento } = require('../instrucciones/Incremento');
    const { Decremento } = require('../instrucciones/Decremento'); 
    const { While } = require('../instrucciones/While');
    const  {Return} = require('../instrucciones/Return');
    const {Break } = require('../instrucciones/Break');
    const {Continue } = require('../instrucciones/Continue');
    const {If } = require('../instrucciones/If');
    const {DoWhile } = require('../instrucciones/DoWhile');
    const {For} = require('../instrucciones/For');
    // expresiones 
    const {Aritmetica, AritmeticOp} = require('../expresiones/Aritmetica');
    const {Relacional, RelacionaOp} = require('../expresiones/Relacional');
    const {Logica, LogicaOp} = require('../expresiones/Logica');
    const { Print } = require('../instrucciones/Print');   
    const { Println } = require('../instrucciones/Println');   
    const { Typeof } = require('../instrucciones/Typeof');   
    
    let sg = Singleton.getInstance();    
    let tokens = [];
    let errores = sg.errores;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://se ignoran espacios en blanco
break;
case 1://Comentarios unilinea
break;
case 2://comentarios multilinea
break;
case 3: tokens.push(new Token('r_int', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 83;
break;
case 4: tokens.push(new Token('r_double', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 84;
break;
case 5: tokens.push(new Token('r_char', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 85;
break;
case 6: tokens.push(new Token('r_boolean', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 86;
break;
case 7: tokens.push(new Token('r_string', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 87;
break;
case 8: tokens.push(new Token('r_const', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 9: tokens.push(new Token('r_if', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 10: tokens.push(new Token('r_else', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 11: tokens.push(new Token('r_null', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'RNULL';
break;
case 12: tokens.push(new Token('r_switch', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 13: tokens.push(new Token('r_case', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44;
break;
case 14: tokens.push(new Token('r_default', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 47;
break;
case 15: tokens.push(new Token('r_for', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 48;
break;
case 16: tokens.push(new Token('r_while', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 17: tokens.push(new Token('r_true', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 81;
break;
case 18: tokens.push(new Token('r_false', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82;
break;
case 19: tokens.push(new Token('r_do', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 52;
break;
case 20: tokens.push(new Token('r_continue', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 24;
break;
case 21: tokens.push(new Token('r_void', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 55;
break;
case 22: tokens.push(new Token('r_return', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 53;
break;
case 23: tokens.push(new Token('r_call', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 56;
break;
case 24: tokens.push(new Token('r_break', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 23;
break;
case 25: tokens.push(new Token('r_println', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59;
break;
case 26: tokens.push(new Token('r_print', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 58;
break;
case 27: tokens.push(new Token('r_typeof', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 28: tokens.push(new Token('tk_;', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 22;
break;
case 29: tokens.push(new Token('tk_,', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 30: tokens.push(new Token('tk_(', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 31: tokens.push(new Token('tk_)', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36;
break;
case 32: tokens.push(new Token('tk_{', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 37;
break;
case 33: tokens.push(new Token('tk_}', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 34: tokens.push(new Token('tk_:', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 35: tokens.push(new Token('tk_>=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68; 
break;
case 36: tokens.push(new Token('tk_<=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 69; 
break;
case 37: tokens.push(new Token('tk_==', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 70; 
break;
case 38: tokens.push(new Token('tk_!=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71; 
break;
case 39: tokens.push(new Token('tk_>', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 66; 
break;
case 40: tokens.push(new Token('tk_<', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67; 
break;
case 41: tokens.push(new Token('tk_=', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32; 
break;
case 42: tokens.push(new Token('tk_and', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62; 
break;
case 43: tokens.push(new Token('tk_or', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63; 
break;
case 44: tokens.push(new Token('tk_not', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 65; 
break;
case 45: tokens.push(new Token('tk_xor', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64; 
break;
case 46: tokens.push(new Token('tk_+', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73; 
break;
case 47: tokens.push(new Token('tk_-', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 72; 
break;
case 48: tokens.push(new Token('tk_*', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74; 
break;
case 49: tokens.push(new Token('tk_/', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 75; 
break;
case 50: tokens.push(new Token('tk_**', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'POW'; 
break;
case 51: tokens.push(new Token('tk_%', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 76; 
break;
case 52: tokens.push(new Token('tk_identificador', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31; 
break;
case 53: tokens.push(new Token('tk_decimal', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 78; 
break;
case 54: tokens.push(new Token('tk_entero', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 77; 
break;
case 55:  /*yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2);*/ tokens.push(new Token('tk_cadena', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
                                return 79;                           
                            
break;
case 56: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); tokens.push(new Token('tk_char', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); 
                                return 80; 
                            
break;
case 57:return 5;
break;
case 58: 
                                errores.push(new Error(yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column, 'Caracter Desconocido', 'Error Lexico'));
                            
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:null\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:call\b)/i,/^(?:break\b)/i,/^(?:Println\b)/i,/^(?:Print\b)/i,/^(?:Typeof\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?::)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\*\*)/i,/^(?:%)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:"((\\")|[^\"\n])*")/i,/^(?:(('([^]|\\\\|\\t|\\n|\\r|\\)')|''))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}